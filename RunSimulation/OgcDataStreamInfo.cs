/*
 * Edge Connection Manager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OGCServiceCatalogue.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OgcDataStreamInfo : IEquatable<OgcDataStreamInfo>
    { 
        /// <summary>
        /// The GOST Datastream ID
        /// </summary>
        /// <value>The GOST Datastream ID</value>
        [DataMember(Name= "DataStreamId")]
        public int? DataStreamId { get; set; }

        /// <summary>
        /// Heatmap Lower Left Corner
        /// </summary>
        /// <value>Heatmap Lower Left Corner</value>
        [DataMember(Name="MqttTopic")]
        public string MqttTopic { get; set; }

        /// <summary>
        /// Adress of MQTT server
        /// </summary>
        /// <value>Adress of MQTT server</value>
        [DataMember(Name="MqttServer")]
        public string MqttServer { get; set; }

        /// <summary>
        /// External Id for the data stream
        /// </summary>
        /// <value>External Id for the data stream</value>
        [DataMember(Name="ExternalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// External metadata for the datastream
        /// </summary>
        /// <value>External metadata for the datastream</value>
        [DataMember(Name="Metadata")]
        public string Metadata { get; set; }

        /// <summary>
        /// Data provider ID
        /// </summary>
        /// <value>External metadata for the datastream</value>
        [DataMember(Name = "SensorType")]
        public string SensorType { get; set; }

        /// <summary>
        /// Data provider ID
        /// </summary>
        /// <value>External metadata for the datastream</value>
        [DataMember(Name = "UnitOfMeasurement")]
        public string UnitOfMeasurement { get; set; }

        /// <summary>
        /// optional inititial latitude for the thing
        /// </summary>
        /// <value>fixedLatitude</value>
        [DataMember(Name = "fixedLatitude")]
        public double? fixedLatitude { get; set; }

        /// <summary>
        /// optional inititial latitude for the thing
        /// </summary>
        /// <value>fixedLongitude</value>
        [DataMember(Name = "fixedLongitude")]
        public double? fixedLongitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OgcDataStreamInfo {\n");
            sb.Append("  DataStreamId: ").Append(DataStreamId).Append("\n");
            sb.Append("  MqttTopic: ").Append(MqttTopic).Append("\n");
            sb.Append("  MqttServer: ").Append(MqttServer).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SensorType: ").Append(SensorType).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  fixedLatitude: ").Append(fixedLatitude).Append("\n");
            sb.Append("  fixedLongitude: ").Append(fixedLongitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OgcDataStreamInfo)obj);
        }

        /// <summary>
        /// Returns true if OgcDataStreamInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of OgcDataStreamInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OgcDataStreamInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DataStreamId == other.DataStreamId ||
                    DataStreamId != null &&
                    DataStreamId.Equals(other.DataStreamId)
                ) && 
                (
                    MqttTopic == other.MqttTopic ||
                    MqttTopic != null &&
                    MqttTopic.Equals(other.MqttTopic)
                ) && 
                (
                    MqttServer == other.MqttServer ||
                    MqttServer != null &&
                    MqttServer.Equals(other.MqttServer)
                ) && 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) &&
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                ) &&
                (
                    SensorType == other.SensorType ||
                    SensorType != null &&
                    SensorType.Equals(other.SensorType)
                ) &&
                (
                    UnitOfMeasurement == other.UnitOfMeasurement ||
                    UnitOfMeasurement != null &&
                    UnitOfMeasurement.Equals(other.UnitOfMeasurement)
                ) &&
                (
                    fixedLatitude == other.fixedLatitude ||
                    fixedLatitude != null &&
                    fixedLatitude.Equals(other.fixedLatitude)
                ) && (
                    fixedLongitude == other.fixedLongitude ||
                    fixedLongitude != null &&
                    fixedLongitude.Equals(other.fixedLongitude)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DataStreamId != null)
                    hashCode = hashCode * 59 + DataStreamId.GetHashCode();
                if (MqttTopic != null)
                    hashCode = hashCode * 59 + MqttTopic.GetHashCode();
                if (MqttServer != null)
                    hashCode = hashCode * 59 + MqttServer.GetHashCode();
                if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                if (SensorType != null)
                    hashCode = hashCode * 59 + SensorType.GetHashCode();
                if (UnitOfMeasurement != null)
                    hashCode = hashCode * 59 + UnitOfMeasurement.GetHashCode();
                if (fixedLatitude != null)
                    hashCode = hashCode * 59 + fixedLatitude.GetHashCode();
                if (fixedLongitude != null)
                    hashCode = hashCode * 59 + fixedLongitude.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(OgcDataStreamInfo left, OgcDataStreamInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OgcDataStreamInfo left, OgcDataStreamInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
